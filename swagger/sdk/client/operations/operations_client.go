// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindJob(params *FindJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindJobOK, error)

	JobLogs(params *JobLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JobLogsOK, error)

	JobStatus(params *JobStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JobStatusOK, error)

	ListJobs(params *ListJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobsOK, error)

	RunJob(params *RunJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FindJob Find job by id
*/
func (a *Client) FindJob(params *FindJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findJob",
		Method:             "GET",
		PathPattern:        "/jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobLogs Job logs
*/
func (a *Client) JobLogs(params *JobLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JobLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobLogs",
		Method:             "GET",
		PathPattern:        "/jobs/running/{runId}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobStatus Job status
*/
func (a *Client) JobStatus(params *JobStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobStatus",
		Method:             "GET",
		PathPattern:        "/jobs/running/{runId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListJobs List jobs
*/
func (a *Client) ListJobs(params *ListJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listJobs",
		Method:             "GET",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RunJob Run job
*/
func (a *Client) RunJob(params *RunJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runJob",
		Method:             "POST",
		PathPattern:        "/jobs/{id}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
